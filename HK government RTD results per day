import urllib.request, urllib.parse, urllib.error
import re
import ssl
from bs4 import BeautifulSoup
from datetime import timedelta, date

ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE

def daterange(start_date, end_date):
    for n in range(int ((end_date - start_date).days)):
        yield start_date + timedelta(n)

start_date = date(2022, 3, 1)
end_date = date(2022, 3, 13)
for single_date in daterange(start_date, end_date):
    tottest = 0
    totpos = 0
    year = single_date.strftime("%Y")
    month = single_date.strftime("%m")
    day = single_date.strftime("%d")
    print(single_date.strftime("%Y-%m-%d")) 
    url = f'https://www.info.gov.hk/gia/general/{year}{month}/{day}.htm'
    dayhtml = urllib.request.urlopen(url, context=ctx).read()
    daysearch = f'href="/gia/general/{year}{month}/{day}/(.*?)"'
    links = re.findall(daysearch.encode(), dayhtml)
    substring = 'Government enforces "restriction-testing declaration" and compulsory testing notice in respect of specified "restricted area" in '
    for link in links:
        link = f'https://www.info.gov.hk/gia/general/{year}{month}/{day}/' + link.decode()
        html = urllib.request.urlopen(link, context=ctx).read()
        soup = BeautifulSoup(html, 'html.parser')
        titletags = soup('title')
        for titletag in titletags:
            if titletag.contents[0].find(substring) != -1:
                location = re.findall('Government enforces "restriction-testing declaration" and compulsory testing notice in respect of specified "restricted area" in (.+)', titletag.contents[0])
                # print('Location: ', location[0])
        pos = re.findall(b'mong.*\s([0-9]+)\s.*tested preliminarily positive cases', html)
        if len(pos) > 0:
            try:
                tot = re.findall(b'(\s[0-9 ]+)people.*undergone testing', html)
                tot = int(tot[0].decode().replace(' ',''))
            except IndexError:
                tot = re.findall(b'(\s[0-9 ]+)persons.*undergone testing', html)
                tot = int(tot[0].decode().replace(' ',''))
            num = int(pos[0].decode())
            # print('Prelim pos. no.: ', num)
            # print('Total tests: ', tot)
            # print(f'% positive: {round(num/tot*100, 2)}%')
            # print(link)
            tottest += tot
            totpos += num
            # count += 1
            # print("")
        if len(pos) <= 0:
            pos = re.findall(b'mong.*\s([0-9]+)\s.*cases tested preliminarily positive', html)
            if len(pos) > 0:
                try:
                    tot = re.findall(b'(\s[0-9 ]+)people.*undergone testing', html)
                    tot = int(tot[0].decode().replace(' ',''))
                except IndexError:
                    tot = re.findall(b'(\s[0-9 ]+)persons.*undergone testing', html)
                    tot = int(tot[0].decode().replace(' ',''))
                num = int(pos[0].decode())   
                tottest += tot
                totpos += num  
    # print(f'No. of cases found by RTD: {totpos}')     
    # print(f'No. of RTD tests done: {tottest}')  
    print(f'圍封強檢的初陽比率: {round(totpos/tottest*100, 2)}%')
